//=============================================================================
//
// テキスト読み込み処理 [loadText.cpp]
// Author : Takuto Ishida
//
//=============================================================================
#define _CRT_SECURE_NO_WARNINGS
#include "loadText.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=========================================
// コンストラクタ
//=========================================
CLoadText::CLoadText()
{
}

//=========================================
// デストラクタ
//=========================================
CLoadText::~CLoadText()
{
}

//=========================================
// １行分読み込む
//=========================================
char *CLoadText::ReadLine(FILE *pFile, char *pDest)
{
	// 文字列を１行分取得
	fgets(pDest, 256, pFile);

	while (1)
	{
		if (memcmp(pDest, "#", 1) == 0)
		{// 先頭が「#」のとき
		 // 文字列を１行分取得
			fgets(pDest, 256, pFile);
			//break;
		}
		else if (memcmp(pDest, "\n", 1) == 0)
		{// 先頭が「\n」のとき
			pDest += 1;
			break;
		}
		else if (memcmp(pDest, "\t", 1) == 0)
		{// 先頭が「\t」のとき
			pDest += 1;
		}
		else if (memcmp(pDest, " ", 1) == 0)
		{// 先頭が「 」のとき
			pDest += 1;
		}
		else
		{// 有効な行
			break;
		}
	}

	return pDest;
}

//=========================================
// 文字列を抜き出す
//=========================================
int CLoadText::PopString(char *pSrc, char *pDest)
{
	int nCntString = 0;
	char *pStr = NULL;
	strcpy(pDest, pSrc);	// 文字列を取り出す

	while (1)
	{
		nCntString++;
		pSrc += 1;				// 頭出し

		if (memcmp(pSrc, " ", 1) == 0)
		{// スペースがきたとき
			pStr = new char[nCntString + 1];
			strncpy(pStr, pDest, nCntString);
			break;
		}
	}

	strncpy(pDest, pStr, nCntString);	// 文字列を取り出す
	nCntString++;			// スペース分を進める
	pSrc += 1;				// 頭出し

	delete[] pStr;
	return nCntString;
}
