//=============================================================================
//
// 体力処理 [life.cpp]
// Author : Ishida Takuto
//
//=============================================================================
#include "life.h"
#include "gauge.h"

#include "manager.h"
#include "renderer.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define FRAME2D_TEXTURE	"data/TEXTURE/gauge02.png"		// 2Dゲージの枠
#define BAR2D_TEXTURE	"data/TEXTURE/gauge03.png"		// 2Dゲージのバー
#define FRAME3D_TEXTURE	"data/TEXTURE/gauge02.png"		// 3Dゲージの枠
#define BAR3D_TEXTURE	"data/TEXTURE/gauge03.png"		// 3Dゲージのバー

#define BAR_WIDTH_LIFE	(300)		// ライフバーの幅
#define BAR_HEIGHT_LIFE	(40)		// ライフバーの高さ

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CLifeManager::m_pTexture[MAX_LIFETEXTURE] = {};

//=============================================================================
// テクスチャの読み込み
//=============================================================================
HRESULT CLifeManager::Load(void)
{
	// デバイスの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice, FRAME2D_TEXTURE, &m_pTexture[0]);
	D3DXCreateTextureFromFile(pDevice, BAR2D_TEXTURE, &m_pTexture[1]);
	D3DXCreateTextureFromFile(pDevice, FRAME3D_TEXTURE, &m_pTexture[2]);
	D3DXCreateTextureFromFile(pDevice, BAR3D_TEXTURE, &m_pTexture[3]);

	return S_OK;
}

//=============================================================================
// 読み込んだテクスチャの解放
//=============================================================================
void CLifeManager::Unload(void)
{
	for (int nCntTex = 0; nCntTex < MAX_LIFETEXTURE; nCntTex++)
	{
		if (NULL != m_pTexture[nCntTex])
		{// テクスチャの破棄
			m_pTexture[nCntTex]->Release();
			m_pTexture[nCntTex] = NULL;
		}
	}
}

//=============================================================================
// コンストラクタ
//=============================================================================
CLifeManager::CLifeManager(int nPriority, CScene::OBJTYPE objType) : CScene(nPriority, objType)
{
	m_nLife = 0;		// ライフの値
}

//=============================================================================
// デストラクタ
//=============================================================================
CLifeManager::~CLifeManager()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CLifeManager::Init(void)
{
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CLifeManager::Uninit(void)
{
	// 自分を破棄
	CScene::Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CLifeManager::Update(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void CLifeManager::Draw(void)
{
}

//=============================================================================
// 体力の増減
//=============================================================================
const void CLifeManager::AddSubtract(int nValue)
{
	// ライフを増減させる
	m_nLife += nValue;
}

/*==============================================*/
/*				 2Dライフクラス					*/
/*==============================================*/

//=============================================================================
// 生成処理
//=============================================================================
CLife2D *CLife2D::Create(int nLife, D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CLife2D *pLife;

	pLife = new CLife2D;	// メモリを確保

	if (NULL != pLife)
	{// メモリ確保成功
		pLife->SetLife(nLife);		// 体力の設定

		// ゲージの生成
		pLife->m_pGauge = CGauge2D::Create(3, pos, (float)nLife, (float)nLife, fWidth, fHeight);

		// 初期化処理
		pLife->Init();
	}

	return pLife;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CLife2D::CLife2D(int nPriority, CScene::OBJTYPE objType) : CLifeManager(nPriority, objType)
{
	m_pGauge = NULL;	// ゲージクラス
}

//=============================================================================
// デストラクタ
//=============================================================================
CLife2D::~CLife2D()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CLife2D::Init(void)
{
	// 色の設定
	m_pGauge->SetColor(D3DXCOLOR(0.0f, 1.0f, 0.0f, 1.0f), 2);	// 現在の体力
	m_pGauge->SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), 1);	// 現在の体力と受けたダメージの差分
	m_pGauge->SetColor(D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f), 0);	// 元の長さ

	// テクスチャの設定
	m_pGauge->BindTexture(Getexture(0), 0);
	m_pGauge->BindTexture(Getexture(1), 1);
	m_pGauge->BindTexture(Getexture(1), 2);

	// 現在の値を示すバーを設定
	m_pGauge->SetCurGauge(2);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CLife2D::Uninit(void)
{
	// 自分を破棄
	CScene::Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CLife2D::Update(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void CLife2D::Draw(void)
{
}

//=============================================================================
// 体力の増減
//=============================================================================
const void CLife2D::AddSubtract(int nValue)
{
	CLifeManager::AddSubtract(nValue);

	if (NULL != m_pGauge)
	{// 値の設定
		m_pGauge->AddSubtract((float)nValue);
	}
}

/*==============================================*/
/*				 3Dライフクラス					*/
/*==============================================*/

//=============================================================================
// 生成処理
//=============================================================================
CLife3D *CLife3D::Create(int nLife, D3DXVECTOR3 offset, float fWidth, float fHeight, D3DXVECTOR3 *pPosParent)
{
	CLife3D *pLife;

	pLife = new CLife3D;	// メモリを確保

	if (NULL != pLife)
	{// メモリ確保成功
		pLife->SetLife(nLife);	// 体力の設定

		// ゲージの生成
		pLife->m_pGauge = CGauge3D::Create(3, offset, (float)nLife, (float)nLife, fWidth, fHeight, pPosParent, 0);

		// 初期化処理
		pLife->Init();
	}

	return pLife;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CLife3D::CLife3D(int nPriority, CScene::OBJTYPE objType) : CLifeManager(nPriority, objType)
{
	m_pGauge = NULL;	// ゲージクラス
}

//=============================================================================
// デストラクタ
//=============================================================================
CLife3D::~CLife3D()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CLife3D::Init(void)
{
	// 色の設定
	m_pGauge->SetColor(D3DXCOLOR(1.0f, 0.2f, 0.0f, 1.0f), 2);	// 現在の体力
	m_pGauge->SetColor(D3DXCOLOR(1.0f, 1.0f, 0.0f, 1.0f), 1);	// 現在の体力と受けたダメージの差分
	m_pGauge->SetColor(D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f), 0);	// 枠

	// テクスチャの設定
	m_pGauge->BindTexture(Getexture(2), 0);
	m_pGauge->BindTexture(Getexture(3), 1);
	m_pGauge->BindTexture(Getexture(3), 2);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CLife3D::Uninit(void)
{
	if (NULL != m_pGauge)
	{// 終了処理
		m_pGauge->Uninit();
		m_pGauge = NULL;
	}

	// 自分を破棄
	CScene::Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CLife3D::Update(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void CLife3D::Draw(void)
{
}

//=============================================================================
// 体力の増減
//=============================================================================
const void CLife3D::AddSubtract(int nValue)
{
	CLifeManager::AddSubtract(nValue);

	if (NULL != m_pGauge)
	{// 値の設定
		m_pGauge->AddSubtract((float)nValue);
	}
}
